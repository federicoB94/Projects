# %%
import numpy as np
from others import logPsiDiff

# %%
def Metropolis(Ai, Bj, Wij, iterations, burnin, autocorr=1):
    """
    Metropolis simulation to generate many-body configurations based of the RBM state

        Parameters
        ----------
        Ai : np.array(), dim=N
            Biases of the visible units
        Bj : np.array(), dim=M
            Biases of the hidden units
        Wij : np.array(), dim=(N,M)
            Weights between visible and hidden units
        iterations : int
            Number of steps of the simulation
        burnin : int
            Number of steps to discard before saving the results.
            Must be burnin < iter.
        autocorr : int [default=1]
            Number of steps between two consecutive records of the results

        Returns
        -------
        config : np.array(), dim=((iter-burnin)/autocorr, N))
            Matrix with the spin configurations generated by the Metropolis.
            Each row represents a different realization.
        Opk : np.array(), dim=((iter-burnin)/autocorr, N+M+N*M))
            Matrix with the derivatives of the RBM wave function
            wrt to the network parameters.
            Each row represents a different realization.
    """

    N = len(Ai)
    Si = np.random.choice([-1,1], size=N)
    config = []
    Opk = []

    for it in range(iterations):
        Si_new = Si.copy()
        idx = np.random.randint(N)
        Si_new[idx] = -Si_new[idx]
        log_r = logPsiDiff(Si_new, Si, Ai, Bj, Wij)
        r = np.absolute(np.exp(log_r))**2
        if np.random.rand() < r:
            Si = Si_new.copy()

        if (it >= burnin) and (it%autocorr == 0):
            tmp = []
            Tj = Bj + np.matmul(np.transpose(Wij), Si)
            tanTj = np.tanh(Tj)
            config.append(Si)
            tmp += Si.tolist()
            tmp += tanTj.tolist()
            for s in Si:
                for t in tanTj:
                    tmp.append(s*t)
            Opk.append(tmp)

    return np.array(config), np.array(Opk)