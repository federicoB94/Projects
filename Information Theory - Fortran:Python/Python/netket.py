# -*- coding: utf-8 -*-
"""NetKet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1inVOc_dIQjCSDvA-LoOSuYdMsVmslgAm
"""

! pip install netket

# Import netket library
import netket as nk
# Import Json, this will be needed to examine log files
import json
# Helper libraries
import numpy as np
import matplotlib.pyplot as plt
import time

# Define a 1d chain
L = 7
g = nk.graph.Hypercube(length=L, n_dim=1, pbc=False)
# Define the Hilbert space based on this graph
hi = nk.hilbert.Spin(s=0.5, graph=g)
# calling the Ising 1d Hamiltonian
ha = nk.operator.Ising(hilbert=hi, J=1., h=0.2)

# compute the ground-state energy (here we only need the lowest energy, and do not need the eigenstate)
exact_result = nk.exact.lanczos_ed(ha, first_n=2, compute_eigenvectors=False)
exact_gs_energy = exact_result.eigenvalues[0]
print('The exact ground-state energy is E0 =',exact_gs_energy)

# RBM ansatz with alpha=1
ma = nk.machine.RbmSpin(alpha=1, hilbert=hi)

# Sampler
sa = nk.sampler.MetropolisLocal(machine=ma)
ma.init_random_parameters(seed=123, sigma=0.01)

# Optimizer
op = nk.optimizer.Sgd(learning_rate=0.1)
# Stochastic reconfiguration
gs = nk.variational.Vmc(
    hamiltonian=ha,
    sampler=sa,
    optimizer=op,
    n_samples=1000,
    diag_shift=0.1,
    use_iterative=False,
    method='Sr')

start = time.time()
gs.run(output_prefix='RBM', n_iter=200)
end = time.time()

print('### RBM calculation')
print('Has',ma.n_par,'parameters')
print('The RBM calculation took',end-start,'seconds')

# import the data from log file
data=json.load(open("RBM.log"))

# Extract the relevant information
iters=[]
energy_RBM=[]

for iteration in data["Output"]:
    iters.append(iteration["Iteration"])
    energy_RBM.append(iteration["Energy"]["Mean"])

plt.plot(energy_RBM, color="C1", label="RBM")
plt.axhline(y=exact_gs_energy, xmin=0, xmax=iters[-1], linewidth=1, linestyle="--", color="C0", label='Lanczos')
plt.show()